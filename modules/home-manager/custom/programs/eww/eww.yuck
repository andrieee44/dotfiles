(defvar batStatus `{
  "Charging": "󱐋",
  "Discharging": "",
  "Full": "",
  "Not charging": "󰈅"
}`)

(deflisten status `jstat`)

(defwidget sep [unindent cond]
  (label :class `sep` :unindent unindent :text `${cond ? " ▏" : ""}`))

(defwidget hyprlandWindow []
  (box :space-evenly false
    (sep :unindent true :cond `${status.Hyprland.Window != ""}`)
    (label :unindent false :text `${substring(status.Hyprland.Window, status.Hyprland.Scroll, status.Hyprland.Limit)}`)))

(defwidget hyprlandWorkspaces []
  (box :space-evenly false
    (for workspace in `${jq(status.Hyprland.Monitors[0].Workspaces, "to_entries")}`
      (button :class `${workspace.key == status.Hyprland.ActiveWorkspace ? "activeWorkspace" : ""}` :onclick `hyprctl dispatch workspace ${workspace.key}`
        (label :class `${workspace.key == status.Hyprland.ActiveWorkspace ? "activeWorkspace" : ""}` :unindent false :text `${workspace.value}`)))))

(defwidget date []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `${status.Date.Icon} `)
    (label :unindent false :text `${status.Date.Date}`)))

(defwidget netSpd []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `󰶣 `)
    (label :unindent false :text `${round(status.NetSpd.Up / 1000000, 1)} MB `)
    (label :class `icon` :unindent false :text `󰶡 `)
    (label :unindent false :text `${round(status.NetSpd.Down / 1000000, 1)} MB`)))

(defwidget vol []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `${status.Vol.Mute ? "󰝟" : "${status.Vol.Icon}"} `)
    (label :unindent false :text `${status.Vol.Mute ? "muted" : "${round(status.Vol.Perc, 0)}%"}`)))

(defwidget swap []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `󰓡 ${status.Swap.Icon} `)
    (label :unindent false :text `${round(status.Swap.UsedPerc, 0)}%`)))

(defwidget ram []
  (box :space-evenly false
    (label :class `icon` :unindent false :text ` ${status.Ram.Icon} `)
    (label :unindent false :text `${round(status.Ram.UsedPerc, 0)}%`)))

(defwidget cpu []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `󰍛 ${status.Cpu.Icon} `)
    (label :unindent false :text `${round(status.Cpu.AvgUsage, 0)}%`)))

(defwidget bri []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `${status.Bri.Icon} `)
    (label :unindent false :text `${round(status.Bri.Perc, 0)}%`)))

(defwidget bat []
  (box :space-evenly false
    (for bat in `${jq(status.Bat, "to_entries | map(.value)")}`
      (box :space-evenly false
        (label :class `icon` :unindent false :text `${bat.Icon}${batStatus["${bat.Status}"]} `)
        (label :unindent false :text `${round(bat.Capacity, 0)}%`)))))

(defwidget music []
  (box :space-evenly false
    (label :class `icon` :unindent false :text `${status.Music.State == "play" ? "󰝚" : "${status.Music.State == "pause" ? "󰏤" : "󰝛"}"} `)
    (label :unindent false :text `${status.Music.State == "stop" ? "stop" : "${substring(status.Music.Song, status.Music.Scroll, status.Music.Limit)}"}`)))

(defwidget ethernet []
  (box :space-evenly false
    (for eth in `${jq(status.Ethernet.Ethernets, "to_entries | map(select(.value.Powered))")}`
      (box :space-evenly false
        (label :class `icon` :unindent false :text `󰈀 `)
        (label :unindent false :text `${substring(eth.key, eth.value.Scroll, status.Ethernet.Limit)}`)
        (sep :unindent false :cond true)))))

(defwidget internet []
  (box :space-evenly false
    (for wifi in `${jq(status.Internet.Internets, "to_entries | map(.value)")}`
      (box :space-evenly false
        (label :class `icon` :unindent false :text `${wifi.Powered ? "${wifi.Icon} " : "${wifi.Scanning ? " " : ""}"}`)
        (label :unindent false :text `${wifi.Powered ? "${substring(wifi.Name, wifi.Scroll, status.Internet.Limit)}" : "${wifi.Scanning ? "scanning" : ""}"}`)
        (sep :unindent false :cond `${wifi.Scanning || wifi.Powered}`)))))

(defwidget bluetooth []
  (box :space-evenly false
    (for adapter in `${jq(status.Bluetooth.Adapters, "to_entries | map(select(.value.Powered).value)")}`
      (box :space-evenly false
        (label :class `icon` :unindent false :text `${adapter.Discovering ? "󰂯 " : ""}`)
        (label :unindent false :text `${adapter.Discovering ? "scanning" : ""}`)
        (sep :unindent false :cond `${adapter.Discovering}`)
        (for device in `${jq(adapter.Devices, "to_entries | map(select(.value.Connected).value)")}`
          (box :space-evenly false
            (label :class `icon` :unindent false :text `󰂯${device.Icon} `)
            (label :unindent false :text `${device.Battery}% ${substring(device.Name, device.Scroll, status.Bluetooth.Limit)}`)
            (sep :unindent false :cond true)))))))

(defwindow bar [screen]
  :monitor screen :stacking `fg` :exclusive true
  :geometry (geometry :width `98%` :height `60px` :y `20px` :anchor `top center`)
  (box :class `window` :space-evenly false
    (box :hexpand true :space-evenly false :halign `start`
      (hyprlandWorkspaces)
      (hyprlandWindow))
    (box :hexpand true :space-evenly false :halign `end`
      (bluetooth)
      (music)
      (sep :unindent false :cond true) (internet)
      (ethernet)
      (vol)
      (sep :unindent false :cond true) (bri)
      (sep :unindent false :cond true) (bat)
      (sep :unindent false :cond true) (cpu)
      (sep :unindent false :cond true) (ram)
      (sep :unindent false :cond true) (netSpd)
      (sep :unindent false :cond true) (date)
      (label :unindent false :text ` `))))

(defwindow lock [screen]
  :monitor screen :stacking `fg` :exclusive true
  :geometry (geometry :width `98%` :height `60px` :y `20px` :anchor `top center`)
  (box :class `window` :space-evenly false
    (box :hexpand true :space-evenly false :halign `start`
      (hyprlandWorkspaces)
      (hyprlandWindow))
    (box :hexpand true :space-evenly false :halign `end`
      (bluetooth)
      (music)
      (sep :unindent false :cond true) (internet)
      (ethernet)
      (vol)
      (sep :unindent false :cond true) (bri)
      (sep :unindent false :cond true) (bat)
      (sep :unindent false :cond true) (cpu)
      (sep :unindent false :cond true) (ram)
      (sep :unindent false :cond true) (netSpd)
      (sep :unindent false :cond true) (date)
      (label :unindent false :text ` `))))
